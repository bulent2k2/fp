GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Display all 470 possibilities? (y or n)
!!                      Prelude.Nothing         Prelude.logBase         Prelude.zipWith3        map
$                       Prelude.Num             Prelude.lookup          Prelude.||              mapM
$!                      Prelude.Ord             Prelude.map             Rational                mapM_
&&                      Prelude.Ordering        Prelude.mapM            Read                    max
*                       Prelude.Rational        Prelude.mapM_           ReadS                   maxBound
**                      Prelude.Read            Prelude.max             Real                    maximum
+                       Prelude.ReadS           Prelude.maxBound        RealFloat               maybe
++                      Prelude.Real            Prelude.maximum         RealFrac                min
-                       Prelude.RealFloat       Prelude.maybe           Right                   minBound
.                       Prelude.RealFrac        Prelude.min             Show                    minimum
/                       Prelude.Right           Prelude.minBound        ShowS                   mod
/=                      Prelude.Show            Prelude.minimum         String                  negate
<                       Prelude.ShowS           Prelude.mod             True                    not
<=                      Prelude.String          Prelude.negate          ^                       notElem
=<<                     Prelude.True            Prelude.not             ^^                      null
==                      Prelude.^               Prelude.notElem         abs                     odd
>                       Prelude.^^              Prelude.null            acos                    or
>=                      Prelude.abs             Prelude.odd             acosh                   otherwise
>>                      Prelude.acos            Prelude.or              all                     pi
>>=                     Prelude.acosh           Prelude.otherwise       and                     pred
Bool                    Prelude.all             Prelude.pi              any                     print
Bounded                 Prelude.and             Prelude.pred            appendFile              product
Char                    Prelude.any             Prelude.print           asTypeOf                properFraction
Double                  Prelude.appendFile      Prelude.product         asin                    putChar
EQ                      Prelude.asTypeOf        Prelude.properFraction  asinh                   putStr
Either                  Prelude.asin            Prelude.putChar         atan                    putStrLn
Enum                    Prelude.asinh           Prelude.putStr          atan2                   quot
Eq                      Prelude.atan            Prelude.putStrLn        atanh                   quotRem
False                   Prelude.atan2           Prelude.quot            break                   read
FilePath                Prelude.atanh           Prelude.quotRem         ceiling                 readFile
Float                   Prelude.break           Prelude.read            compare                 readIO
Floating                Prelude.ceiling         Prelude.readFile        concat                  readList
Fractional              Prelude.compare         Prelude.readIO          concatMap               readLn
Functor                 Prelude.concat          Prelude.readList        const                   readParen
GT                      Prelude.concatMap       Prelude.readLn          cos                     reads
IO                      Prelude.const           Prelude.readParen       cosh                    readsPrec
IOError                 Prelude.cos             Prelude.reads           curry                   realToFrac
Int                     Prelude.cosh            Prelude.readsPrec       cycle                   recip
Integer                 Prelude.curry           Prelude.realToFrac      decodeFloat             rem
Integral                Prelude.cycle           Prelude.recip           div                     repeat
Just                    Prelude.decodeFloat     Prelude.rem             divMod                  replicate
LT                      Prelude.div             Prelude.repeat          drop                    return
Left                    Prelude.divMod          Prelude.replicate       dropWhile               reverse
Maybe                   Prelude.drop            Prelude.return          either                  round
Monad                   Prelude.dropWhile       Prelude.reverse         elem                    scaleFloat
Nothing                 Prelude.either          Prelude.round           encodeFloat             scanl
Num                     Prelude.elem            Prelude.scaleFloat      enumFrom                scanl1
Ord                     Prelude.encodeFloat     Prelude.scanl           enumFromThen            scanr
Ordering                Prelude.enumFrom        Prelude.scanl1          enumFromThenTo          scanr1
Prelude.!!              Prelude.enumFromThen    Prelude.scanr           enumFromTo              seq
Prelude.$               Prelude.enumFromThenTo  Prelude.scanr1          error                   sequence
Prelude.$!              Prelude.enumFromTo      Prelude.seq             even                    sequence_
Prelude.&&              Prelude.error           Prelude.sequence        exp                     show
Prelude.*               Prelude.even            Prelude.sequence_       exponent                showChar
Prelude.**              Prelude.exp             Prelude.show            fail                    showList
Prelude.+               Prelude.exponent        Prelude.showChar        filter                  showParen
Prelude.++              Prelude.fail            Prelude.showList        flip                    showString
Prelude.-               Prelude.filter          Prelude.showParen       floatDigits             shows
Prelude..               Prelude.flip            Prelude.showString      floatRadix              showsPrec
Prelude./               Prelude.floatDigits     Prelude.shows           floatRange              significand
Prelude./=              Prelude.floatRadix      Prelude.showsPrec       floor                   signum
Prelude.<               Prelude.floatRange      Prelude.significand     fmap                    sin
Prelude.<=              Prelude.floor           Prelude.signum          foldl                   sinh
Prelude.=<<             Prelude.fmap            Prelude.sin             foldl1                  snd
Prelude.==              Prelude.foldl           Prelude.sinh            foldr                   span
Prelude.>               Prelude.foldl1          Prelude.snd             foldr1                  splitAt
Prelude.>=              Prelude.foldr           Prelude.span            fromEnum                sqrt
Prelude.>>              Prelude.foldr1          Prelude.splitAt         fromInteger             subtract
Prelude.>>=             Prelude.fromEnum        Prelude.sqrt            fromIntegral            succ
Prelude.Bool            Prelude.fromInteger     Prelude.subtract        fromRational            sum
Prelude.Bounded         Prelude.fromIntegral    Prelude.succ            fst                     tail
Prelude.Char            Prelude.fromRational    Prelude.sum             gcd                     take
Prelude.Double          Prelude.fst             Prelude.tail            getChar                 takeWhile
Prelude.EQ              Prelude.gcd             Prelude.take            getContents             tan
Prelude.Either          Prelude.getChar         Prelude.takeWhile       getLine                 tanh
Prelude.Enum            Prelude.getContents     Prelude.tan             head                    toEnum
Prelude.Eq              Prelude.getLine         Prelude.tanh            id                      toInteger
Prelude.False           Prelude.head            Prelude.toEnum          init                    toRational
Prelude.FilePath        Prelude.id              Prelude.toInteger       interact                truncate
Prelude.Float           Prelude.init            Prelude.toRational      ioError                 uncurry
Prelude.Floating        Prelude.interact        Prelude.truncate        isDenormalized          undefined
Prelude.Fractional      Prelude.ioError         Prelude.uncurry         isIEEE                  unlines
Prelude.Functor         Prelude.isDenormalized  Prelude.undefined       isInfinite              until
Prelude.GT              Prelude.isIEEE          Prelude.unlines         isNaN                   unwords
Prelude.IO              Prelude.isInfinite      Prelude.until           isNegativeZero          unzip
Prelude.IOError         Prelude.isNaN           Prelude.unwords         iterate                 unzip3
Prelude.Int             Prelude.isNegativeZero  Prelude.unzip           last                    userError
Prelude.Integer         Prelude.iterate         Prelude.unzip3          lcm                     words
Prelude.Integral        Prelude.last            Prelude.userError       length                  writeFile
Prelude.Just            Prelude.lcm             Prelude.words           lex                     zip
Prelude.LT              Prelude.length          Prelude.writeFile       lines                   zip3
Prelude.Left            Prelude.lex             Prelude.zip             log                     zipWith
Prelude.Maybe           Prelude.lines           Prelude.zip3            logBase                 zipWith3
Prelude.Monad           Prelude.log             Prelude.zipWith         lookup                  ||
Prelude>
